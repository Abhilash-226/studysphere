import React, { useState, useEffect } from "react";
import {
  Container,
  Row,
  Col,
  Card,
  Form,
  Button,
  Alert,
  ProgressBar,
  Badge,
  Tab,
  Tabs,
} from "react-bootstrap";
import {
  FaUser,
  FaGraduationCap,
  FaBrain,
  FaHistory,
  FaUsers,
  FaSave,
  FaEdit,
} from "react-icons/fa";
import studentProfileService from "../../../shared/services/studentProfile.service";
import { useAuth } from "../../../shared/context/AuthContext";
import "./StudentProfile.css";

const StudentProfile = () => {
  const { currentUser } = useAuth();
  const [profile, setProfile] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [activeTab, setActiveTab] = useState("personal");
  const [isEditing, setIsEditing] = useState(false);

  // Form data state
  const [formData, setFormData] = useState(
    studentProfileService.getDefaultProfile()
  );

  // Predefined options
  const academicLevels = [
    "Elementary School",
    "Middle School",
    "High School",
    "College/University",
    "Graduate School",
    "Professional Development",
  ];

  const learningStyles = [
    "Visual",
    "Auditory",
    "Kinesthetic",
    "Reading/Writing",
  ];
  const schedulePreferences = ["Morning", "Afternoon", "Evening", "Flexible"];
  const studyTimeOptions = [
    "1-2 hours/week",
    "3-5 hours/week",
    "6-10 hours/week",
    "10+ hours/week",
  ];
  const parentInvolvementLevels = ["High", "Medium", "Low", "Independent"];
  const teachingModes = [
    "online_individual",
    "online_group",
    "offline_home",
    "offline_classroom",
  ];

  // Load profile data
  useEffect(() => {
    loadProfile();
  }, []);

  const loadProfile = async () => {
    try {
      setLoading(true);
      const response = await studentProfileService.getMyProfile();

      if (response.success) {
        setProfile(response.student);
        setFormData({
          ...studentProfileService.getDefaultProfile(),
          ...response.student,
        });
      } else {
        // Profile doesn't exist yet, use default
        setProfile(studentProfileService.getDefaultProfile());
        setFormData(studentProfileService.getDefaultProfile());
        setIsEditing(true); // Start in edit mode for new profiles
      }
    } catch (error) {
      console.error("Error loading profile:", error);
      setError("Failed to load profile");
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleArrayInputChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value
        .split(",")
        .map((item) => item.trim())
        .filter((item) => item !== ""),
    }));
  };

  const handleLocationChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      location: {
        ...prev.location,
        [field]: value,
      },
    }));
  };

  const handleSave = async () => {
    try {
      setSaving(true);
      setError("");
      setSuccess("");

      const response = await studentProfileService.updateMyProfile(formData);

      if (response.success) {
        setProfile(response.student);
        setSuccess("Profile updated successfully!");
        setIsEditing(false);
      } else {
        setError(response.message || "Failed to update profile");
      }
    } catch (error) {
      console.error("Error saving profile:", error);
      setError("Failed to save profile");
    } finally {
      setSaving(false);
    }
  };

  const handleCancel = () => {
    if (profile) {
      setFormData({ ...studentProfileService.getDefaultProfile(), ...profile });
    }
    setIsEditing(false);
    setError("");
    setSuccess("");
  };

  const getCompletionColor = (percentage) => {
    if (percentage >= 80) return "success";
    if (percentage >= 60) return "warning";
    return "danger";
  };

  if (loading) {
    return (
      <Container className="py-5">
        <div className="text-center">
          <div className="spinner-border" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
        </div>
      </Container>
    );
  }

  const completionPercentage = profile
    ? studentProfileService.calculateCompleteness(profile)
    : studentProfileService.calculateCompleteness(formData);

  const suggestions = profile
    ? studentProfileService.getCompletionSuggestions(profile)
    : studentProfileService.getCompletionSuggestions(formData);

  return (
    <Container className="py-4" style={{ maxWidth: "1200px" }}>
      {/* Enhanced Header with Profile Image */}
      <Card className="mb-4 border-0 shadow-sm">
        <Card.Body className="p-4">
          <Row className="align-items-center">
            <Col md={2} className="text-center mb-3 mb-md-0">
              <div className="profile-image-container position-relative">
                <img
                  src={currentUser?.profileImage || "/images/avatar-placeholder.jpg"}
                  alt="Profile"
                  className="profile-image rounded-circle border border-3 border-light shadow"
                  style={{ width: "100px", height: "100px", objectFit: "cover" }}
                />
                <Badge 
                  bg={getCompletionColor(completionPercentage)} 
                  className="position-absolute bottom-0 end-0 rounded-pill"
                  style={{ fontSize: "0.7rem" }}
                >
                  {completionPercentage}%
                </Badge>
              </div>
            </Col>
            <Col md={6}>
              <div>
                <h2 className="mb-2 fw-bold text-primary">
                  <FaUser className="me-2" />
                  {currentUser?.firstName} {currentUser?.lastName}
                </h2>
                <p className="text-muted mb-2">
                  Complete your profile to help tutors provide better personalized learning
                </p>
                <div className="mb-2">
                  <small className="text-muted d-block mb-1">Profile Completion</small>
                  <ProgressBar
                    variant={getCompletionColor(completionPercentage)}
                    now={completionPercentage}
                    style={{ height: "8px" }}
                  />
                </div>
              </div>
            </Col>
            <Col md={4} className="text-end">
              {!isEditing ? (
                <Button 
                  variant="primary" 
                  size="lg"
                  onClick={() => setIsEditing(true)}
                  className="shadow-sm"
                >
                  <FaEdit className="me-2" />
                  Edit Profile
                </Button>
              ) : (
                <div className="d-flex flex-column gap-2">
                  <Button
                    variant="success"
                    onClick={handleSave}
                    disabled={saving}
                    className="shadow-sm"
                  >
                    <FaSave className="me-2" />
                    {saving ? "Saving..." : "Save Changes"}
                  </Button>
                  <Button 
                    variant="outline-secondary" 
                    onClick={handleCancel}
                  >
                    Cancel
                  </Button>
                </div>
              )}
            </Col>
          </Row>
        </Card.Body>
      </Card>

      {/* Enhanced Alerts */}
      {error && (
        <Alert variant="danger" dismissible onClose={() => setError("")} className="border-0 shadow-sm">
          <Alert.Heading className="h6">
            <i className="fas fa-exclamation-triangle me-2"></i>
            Error
          </Alert.Heading>
          {error}
        </Alert>
      )}
      {success && (
        <Alert variant="success" dismissible onClose={() => setSuccess("")} className="border-0 shadow-sm">
          <Alert.Heading className="h6">
            <i className="fas fa-check-circle me-2"></i>
            Success
          </Alert.Heading>
          {success}
        </Alert>
      )}

      {/* Enhanced Profile Suggestions */}
      {suggestions.length > 0 && (
        <Card className="mb-4 border-0" style={{ backgroundColor: "#e3f2fd" }}>
          <Card.Body className="p-4">
            <div className="d-flex align-items-start">
              <div className="bg-primary text-white rounded-circle p-2 me-3" style={{ minWidth: "40px", height: "40px" }}>
                <i className="fas fa-lightbulb"></i>
              </div>
              <div className="flex-grow-1">
                <h6 className="fw-bold text-primary mb-2">Complete Your Profile:</h6>
                <ul className="mb-0 list-unstyled">
                  {suggestions.slice(0, 3).map((suggestion, index) => (
                    <li key={index} className="mb-1">
                      <i className="fas fa-arrow-right text-primary me-2"></i>
                      {suggestion}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </Card.Body>
        </Card>
      )}

      {/* Enhanced Profile Tabs */}
      <Card className="border-0 shadow-sm">
        <Card.Header className="bg-light border-0 p-0">
          <Tabs
            activeKey={activeTab}
            onSelect={(k) => setActiveTab(k)}
            className="nav-pills-custom border-0"
          >
            {/* Personal Information Tab */}
            <Tab
              eventKey="personal"
              title={
                <span className="d-flex align-items-center">
                  <FaUser className="me-2" />
                  <span className="d-none d-sm-inline">Personal Info</span>
                  <span className="d-sm-none">Personal</span>
                </span>
              }
            >
              <div className="p-4">
                <h5 className="text-primary mb-4">
                  <FaUser className="me-2" />
                  Personal Information
                </h5>
                <Row>
                  <Col md={6}>
                    <Form.Group className="mb-4">
                      <Form.Label className="fw-semibold">Grade/Year</Form.Label>
                      <Form.Control
                        type="text"
                        value={formData.grade || ""}
                        onChange={(e) =>
                          handleInputChange("grade", e.target.value)
                        }
                        disabled={!isEditing}
                        placeholder="e.g., 10th Grade, Sophomore, etc."
                        className="form-control-lg"
                      />
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group className="mb-4">
                      <Form.Label className="fw-semibold">Academic Level</Form.Label>
                    <Form.Select
                      value={formData.academicLevel || ""}
                      onChange={(e) =>
                        handleInputChange("academicLevel", e.target.value)
                      }
                      disabled={!isEditing}
                      className="form-control-lg"
                    >
                      <option value="">Select academic level</option>
                      {academicLevels.map((level) => (
                        <option key={level} value={level}>
                          {level}
                        </option>
                      ))}
                    </Form.Select>
                  </Form.Group>
                </Col>
              </Row>

              <Row>
                <Col md={6}>
                  <Form.Group className="mb-4">
                    <Form.Label className="fw-semibold">School/Institution</Form.Label>
                    <Form.Control
                      type="text"
                      value={formData.school || ""}
                      onChange={(e) =>
                        handleInputChange("school", e.target.value)
                      }
                      disabled={!isEditing}
                      placeholder="Your school or institution name"
                      className="form-control-lg"
                    />
                  </Form.Group>
                </Col>
                <Col md={6}>
                  <Form.Group className="mb-4">
                    <Form.Label className="fw-semibold">Current GPA (optional)</Form.Label>
                    <Form.Control
                      type="number"
                      step="0.01"
                      min="0"
                      max="4.0"
                      value={formData.currentGPA || ""}
                      onChange={(e) =>
                        handleInputChange(
                          "currentGPA",
                          parseFloat(e.target.value)
                        )
                      }
                      disabled={!isEditing}
                      placeholder="0.00 - 4.00"
                    />
                  </Form.Group>
                </Col>
              </Row>

              <Form.Group className="mb-4">
                <Form.Label className="fw-semibold">Bio</Form.Label>
                <Form.Control
                  as="textarea"
                  rows={4}
                  value={formData.bio || ""}
                  onChange={(e) => handleInputChange("bio", e.target.value)}
                  disabled={!isEditing}
                  placeholder="Tell us about yourself, your interests, and learning goals..."
                  maxLength={500}
                  className="form-control-lg"
                />
                <Form.Text className="text-muted">
                  {formData.bio ? formData.bio.length : 0}/500 characters
                </Form.Text>
              </Form.Group>

              <Form.Group className="mb-4">
                <Form.Label className="fw-semibold">Interests & Hobbies</Form.Label>
                <Form.Control
                  type="text"
                  value={
                    formData.interests ? formData.interests.join(", ") : ""
                  }
                  onChange={(e) =>
                    handleArrayInputChange("interests", e.target.value)
                  }
                  disabled={!isEditing}
                  placeholder="e.g., Reading, Sports, Music, Art (separate with commas)"
                  className="form-control-lg"
                />
              </Form.Group>
              </div>
            </Tab>

        {/* Academic Information Tab */}
        <Tab
          eventKey="academic"
          title={
            <span>
              <FaGraduationCap className="me-2" />
              Academic Info
            </span>
          }
        >
          <Card>
            <Card.Body>
              <Form.Group className="mb-3">
                <Form.Label>Subjects</Form.Label>
                <Form.Control
                  type="text"
                  value={formData.subjects ? formData.subjects.join(", ") : ""}
                  onChange={(e) =>
                    handleArrayInputChange("subjects", e.target.value)
                  }
                  disabled={!isEditing}
                  placeholder="e.g., Mathematics, Physics, Chemistry (separate with commas)"
                />
              </Form.Group>

              <Form.Group className="mb-3">
                <Form.Label>Academic Goals</Form.Label>
                <Form.Control
                  as="textarea"
                  rows={2}
                  value={
                    formData.academicGoals
                      ? formData.academicGoals.join(", ")
                      : ""
                  }
                  onChange={(e) =>
                    handleArrayInputChange("academicGoals", e.target.value)
                  }
                  disabled={!isEditing}
                  placeholder="e.g., Improve SAT scores, Master calculus, Get into college (separate with commas)"
                />
              </Form.Group>

              <Row>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>Academic Strengths</Form.Label>
                    <Form.Control
                      as="textarea"
                      rows={2}
                      value={
                        formData.strengths ? formData.strengths.join(", ") : ""
                      }
                      onChange={(e) =>
                        handleArrayInputChange("strengths", e.target.value)
                      }
                      disabled={!isEditing}
                      placeholder="e.g., Problem solving, Writing, Memory (separate with commas)"
                    />
                  </Form.Group>
                </Col>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>Areas for Improvement</Form.Label>
                    <Form.Control
                      as="textarea"
                      rows={2}
                      value={
                        formData.areasForImprovement
                          ? formData.areasForImprovement.join(", ")
                          : ""
                      }
                      onChange={(e) =>
                        handleArrayInputChange(
                          "areasForImprovement",
                          e.target.value
                        )
                      }
                      disabled={!isEditing}
                      placeholder="e.g., Time management, Test anxiety, Algebra (separate with commas)"
                    />
                  </Form.Group>
                </Col>
              </Row>

              <Row>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>Homework Help Needs</Form.Label>
                    <Form.Control
                      type="text"
                      value={
                        formData.homeworkHelpNeeds
                          ? formData.homeworkHelpNeeds.join(", ")
                          : ""
                      }
                      onChange={(e) =>
                        handleArrayInputChange(
                          "homeworkHelpNeeds",
                          e.target.value
                        )
                      }
                      disabled={!isEditing}
                      placeholder="e.g., Daily assignments, Research projects (separate with commas)"
                    />
                  </Form.Group>
                </Col>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>Exam Preparation Needs</Form.Label>
                    <Form.Control
                      type="text"
                      value={
                        formData.examPreparationNeeds
                          ? formData.examPreparationNeeds.join(", ")
                          : ""
                      }
                      onChange={(e) =>
                        handleArrayInputChange(
                          "examPreparationNeeds",
                          e.target.value
                        )
                      }
                      disabled={!isEditing}
                      placeholder="e.g., SAT, AP exams, Final exams (separate with commas)"
                    />
                  </Form.Group>
                </Col>
              </Row>
            </Card.Body>
          </Card>
        </Tab>

        {/* Learning Preferences Tab */}
        <Tab
          eventKey="learning"
          title={
            <span>
              <FaBrain className="me-2" />
              Learning Style
            </span>
          }
        >
          <Card>
            <Card.Body>
              <Form.Group className="mb-3">
                <Form.Label>Learning Style</Form.Label>
                <div>
                  {learningStyles.map((style) => (
                    <Form.Check
                      key={style}
                      type="checkbox"
                      id={`learning-${style}`}
                      label={style}
                      checked={
                        formData.learningStyle
                          ? formData.learningStyle.includes(style)
                          : false
                      }
                      onChange={(e) => {
                        const currentStyles = formData.learningStyle || [];
                        if (e.target.checked) {
                          handleInputChange("learningStyle", [
                            ...currentStyles,
                            style,
                          ]);
                        } else {
                          handleInputChange(
                            "learningStyle",
                            currentStyles.filter((s) => s !== style)
                          );
                        }
                      }}
                      disabled={!isEditing}
                      className="mb-2"
                    />
                  ))}
                </div>
              </Form.Group>

              <Row>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>Study Schedule Preference</Form.Label>
                    <Form.Select
                      value={formData.studySchedulePreference || "Flexible"}
                      onChange={(e) =>
                        handleInputChange(
                          "studySchedulePreference",
                          e.target.value
                        )
                      }
                      disabled={!isEditing}
                    >
                      {schedulePreferences.map((pref) => (
                        <option key={pref} value={pref}>
                          {pref}
                        </option>
                      ))}
                    </Form.Select>
                  </Form.Group>
                </Col>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>Available Study Time</Form.Label>
                    <Form.Select
                      value={formData.availableStudyTime || ""}
                      onChange={(e) =>
                        handleInputChange("availableStudyTime", e.target.value)
                      }
                      disabled={!isEditing}
                    >
                      <option value="">Select study time</option>
                      {studyTimeOptions.map((option) => (
                        <option key={option} value={option}>
                          {option}
                        </option>
                      ))}
                    </Form.Select>
                  </Form.Group>
                </Col>
              </Row>

              <Form.Group className="mb-3">
                <Form.Label>Preferred Teaching Mode</Form.Label>
                <div>
                  {teachingModes.map((mode) => (
                    <Form.Check
                      key={mode}
                      type="checkbox"
                      id={`mode-${mode}`}
                      label={mode
                        .replace(/_/g, " ")
                        .replace(/\b\w/g, (l) => l.toUpperCase())}
                      checked={
                        formData.preferredTeachingMode
                          ? formData.preferredTeachingMode.includes(mode)
                          : false
                      }
                      onChange={(e) => {
                        const currentModes =
                          formData.preferredTeachingMode || [];
                        if (e.target.checked) {
                          handleInputChange("preferredTeachingMode", [
                            ...currentModes,
                            mode,
                          ]);
                        } else {
                          handleInputChange(
                            "preferredTeachingMode",
                            currentModes.filter((m) => m !== mode)
                          );
                        }
                      }}
                      disabled={!isEditing}
                      className="mb-2"
                    />
                  ))}
                </div>
              </Form.Group>

              <Form.Group className="mb-3">
                <Form.Label>Special Learning Needs</Form.Label>
                <Form.Control
                  as="textarea"
                  rows={2}
                  value={formData.specialLearningNeeds || ""}
                  onChange={(e) =>
                    handleInputChange("specialLearningNeeds", e.target.value)
                  }
                  disabled={!isEditing}
                  placeholder="Any special accommodations or learning requirements..."
                />
              </Form.Group>
            </Card.Body>
          </Card>
        </Tab>

        {/* Background & Parents Tab */}
        <Tab
          eventKey="background"
          title={
            <span>
              <FaUsers className="me-2" />
              Background
            </span>
          }
        >
          <Card>
            <Card.Body>
              <h5>Tutoring Experience</h5>
              <Form.Group className="mb-3">
                <Form.Check
                  type="checkbox"
                  id="prev-tutoring"
                  label="I have previous tutoring experience"
                  checked={formData.previousTutoringExperience || false}
                  onChange={(e) =>
                    handleInputChange(
                      "previousTutoringExperience",
                      e.target.checked
                    )
                  }
                  disabled={!isEditing}
                />
              </Form.Group>

              {formData.previousTutoringExperience && (
                <Form.Group className="mb-4">
                  <Form.Label>Tutoring Experience Details</Form.Label>
                  <Form.Control
                    as="textarea"
                    rows={2}
                    value={formData.tutoringExperienceDetails || ""}
                    onChange={(e) =>
                      handleInputChange(
                        "tutoringExperienceDetails",
                        e.target.value
                      )
                    }
                    disabled={!isEditing}
                    placeholder="Tell us about your previous tutoring experience..."
                  />
                </Form.Group>
              )}

              <h5>Parent/Guardian Information</h5>
              <Row>
                <Col md={4}>
                  <Form.Group className="mb-3">
                    <Form.Label>Parent/Guardian Name</Form.Label>
                    <Form.Control
                      type="text"
                      value={formData.parentName || ""}
                      onChange={(e) =>
                        handleInputChange("parentName", e.target.value)
                      }
                      disabled={!isEditing}
                      placeholder="Full name"
                    />
                  </Form.Group>
                </Col>
                <Col md={4}>
                  <Form.Group className="mb-3">
                    <Form.Label>Parent/Guardian Email</Form.Label>
                    <Form.Control
                      type="email"
                      value={formData.parentEmail || ""}
                      onChange={(e) =>
                        handleInputChange("parentEmail", e.target.value)
                      }
                      disabled={!isEditing}
                      placeholder="email@example.com"
                    />
                  </Form.Group>
                </Col>
                <Col md={4}>
                  <Form.Group className="mb-3">
                    <Form.Label>Parent/Guardian Phone</Form.Label>
                    <Form.Control
                      type="tel"
                      value={formData.parentPhone || ""}
                      onChange={(e) =>
                        handleInputChange("parentPhone", e.target.value)
                      }
                      disabled={!isEditing}
                      placeholder="Phone number"
                    />
                  </Form.Group>
                </Col>
              </Row>

              <Form.Group className="mb-4">
                <Form.Label>Parent Involvement Level</Form.Label>
                <Form.Select
                  value={formData.parentInvolvement || "Medium"}
                  onChange={(e) =>
                    handleInputChange("parentInvolvement", e.target.value)
                  }
                  disabled={!isEditing}
                >
                  {parentInvolvementLevels.map((level) => (
                    <option key={level} value={level}>
                      {level}
                    </option>
                  ))}
                </Form.Select>
              </Form.Group>

              <h5>Location</h5>
              <Row>
                <Col md={4}>
                  <Form.Group className="mb-3">
                    <Form.Label>City</Form.Label>
                    <Form.Control
                      type="text"
                      value={formData.location?.city || ""}
                      onChange={(e) =>
                        handleLocationChange("city", e.target.value)
                      }
                      disabled={!isEditing}
                      placeholder="Your city"
                    />
                  </Form.Group>
                </Col>
                <Col md={4}>
                  <Form.Group className="mb-3">
                    <Form.Label>State/Province</Form.Label>
                    <Form.Control
                      type="text"
                      value={formData.location?.state || ""}
                      onChange={(e) =>
                        handleLocationChange("state", e.target.value)
                      }
                      disabled={!isEditing}
                      placeholder="Your state"
                    />
                  </Form.Group>
                </Col>
                <Col md={4}>
                  <Form.Group className="mb-3">
                    <Form.Label>Country</Form.Label>
                    <Form.Control
                      type="text"
                      value={formData.location?.country || ""}
                      onChange={(e) =>
                        handleLocationChange("country", e.target.value)
                      }
                      disabled={!isEditing}
                      placeholder="Your country"
                    />
                  </Form.Group>
                </Col>
              </Row>
              </div>
            </Tab>
          </Tabs>
        </Card.Header>
      </Card>
    </Container>
  );
};

export default StudentProfile;
